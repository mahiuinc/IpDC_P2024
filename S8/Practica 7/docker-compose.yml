version: '3'

services:
  nginx:
    image: nginx:latest
    ports:
      - '8080:80'
    volumes:
      - ./nginx/nginx.config:/etc/nginx/conf.d/default.conf:ro
    networks:
      - web_network
  api-server:
    build:
      context: ./api-server
      dockerfile: api-server.Dockerfile
    ports:
      - '5001:5001'
    networks:
      - app_network
    volumes:
      - ./api-server:/usr/app
    command: npm run dev
    depends_on:
      - redis
      - database
      - client
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - DATABASE_URL=${DATABASE_URL}
  redis:
    image: redis:latest
    networks:
      - app_network
    volumes:
      - redis_data:/data
    command: redis-server --save 20 1 --loglevel warning
  database:
    build:
      context: ./db
      dockerfile: Dockerfile
    volumes: 
      - ./db/init_db.sql:/data/application/init_db.sql
      - db_data:/var/lib/mysql
    networks:
      - app_network
    command: --init-file /data/application/init_db.sql
    environment:
      - MYSQL_ROOT_HOST=${DB_HOST}
      - MYSQL_USER=${DB_USER}
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    networks:
      - web_network
      - app_network
    volumes:
      - ./client:/app
    environment:
      - NODE_ENV=development

    
volumes:
  db_data:
  redis_data:

networks:
  web_network:
    # Use a custom driver
    driver: bridge
  app_network:
    # Use a custom driver
    driver: bridge